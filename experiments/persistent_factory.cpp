/*
 * Copyright (C) 2023 Dominik Drexler and Simon Stahlberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include "../include/common/pddl/types.hpp"
#include "../include/common/memory.hpp"

#include <chrono>
#include <iostream>
#include <random>


/// @brief In this experiment, we evaluate the performance of constructing and accessing atoms.
int main() {
    const size_t num_objects = 100;
    const size_t num_predicates = 100;

    const auto start = std::chrono::high_resolution_clock::now();
    std::cout << "Started experiment" << std::endl;

    // Create num_objects-many objects with name object_1,...,object_<num_objects>
    auto object_factory = loki::ObjectFactory();
    auto objects = loki::pddl::ObjectList();
    for (size_t i = 1; i <= num_objects; ++i) {
        objects.push_back(object_factory.get_or_create<loki::pddl::ObjectImpl>(
            ("object_" + std::to_string(i)))
        );
    }

    // Create num_predicates-many binary predicates with name predicate_1,...,predicate_<num_predicates>
    auto predicate_factory = loki::PredicateFactory();
    auto parameter_factory = loki::ParameterFactory();
    auto variable_factory = loki::VariableFactory();
    auto parameters = loki::pddl::ParameterList{
        parameter_factory.get_or_create<loki::pddl::ParameterImpl>(
            variable_factory.get_or_create<loki::pddl::VariableImpl>("?variable_left"), 
            loki::pddl::TypeList{}),
        parameter_factory.get_or_create<loki::pddl::ParameterImpl>(
            variable_factory.get_or_create<loki::pddl::VariableImpl>("?variable_right"), 
            loki::pddl::TypeList{})
    };

    auto predicates = loki::pddl::PredicateList();
    for (size_t i = 1; i <= num_predicates; ++i) {
        predicates.push_back(predicate_factory.get_or_create<loki::pddl::PredicateImpl>(
            ("predicate_" + std::to_string(i)),
            parameters));
    }

    auto atom_factory = loki::AtomFactory(); 
    auto term_factory = loki::TermFactory();
    auto atoms = loki::pddl::AtomList();
    for (const auto& predicate : predicates) {
        for (const auto& object_left : objects) {
            for (const auto& object_right : objects) {
                atoms.push_back(atom_factory.get_or_create<loki::pddl::AtomImpl>(
                    predicate,
                    loki::pddl::TermList{
                        term_factory.get_or_create<loki::pddl::TermObjectImpl>(object_left),
                        term_factory.get_or_create<loki::pddl::TermObjectImpl>(object_right)
                    }));
            }
        }
    }
    std::cout << "Num atoms: " << atoms.size() << std::endl;

    const auto [vm_usage, resident_set] = loki::process_mem_usage();
    const auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
    std::cout << "Finished experiment after " << duration.count() << " milliseconds." << std::endl;
    std::cout << "Peak virtual memory: " << vm_usage << " KB." << std::endl;
    std::cout << "Peak resident set size: " << resident_set << " KB." << std::endl;

    std::random_device rd;  // a seed source for the random number engine
    std::mt19937 gen(0); // mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> distrib(1, 6);
 
    // Use distrib to transform the random unsigned int
    // generated by gen into an int in [1, 6]
    for (int n = 0; n != 10; ++n)
        std::cout << distrib(gen) << ' ';
    std::cout << '\n'; 

    return 0;
}

// cmake -S . -B build -DENABLE_TESTING:bool=TRUE && cmake --build build -j16 && ./build/exe/domain benchmarks/gripper/domain.pddl && ./build/tests/domain/domain_tests