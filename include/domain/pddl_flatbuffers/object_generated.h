// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBJECT_PDDL_FLAT_H_
#define FLATBUFFERS_GENERATED_OBJECT_PDDL_FLAT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace pddl_flat {

struct Object;
struct ObjectBuilder;

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDENTIFIER = 4,
    VT_NAME = 6
  };
  int32_t identifier() const {
    return GetField<int32_t>(VT_IDENTIFIER, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_IDENTIFIER, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_identifier(int32_t identifier) {
    fbb_.AddElement<int32_t>(Object::VT_IDENTIFIER, identifier, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Object::VT_NAME, name);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t identifier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_identifier(identifier);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Object> CreateObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t identifier = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return pddl_flat::CreateObject(
      _fbb,
      identifier,
      name__);
}

inline const pddl_flat::Object *GetObject(const void *buf) {
  return ::flatbuffers::GetRoot<pddl_flat::Object>(buf);
}

inline const pddl_flat::Object *GetSizePrefixedObject(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<pddl_flat::Object>(buf);
}

inline bool VerifyObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pddl_flat::Object>(nullptr);
}

inline bool VerifySizePrefixedObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pddl_flat::Object>(nullptr);
}

inline void FinishObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<pddl_flat::Object> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<pddl_flat::Object> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace pddl_flat

#endif  // FLATBUFFERS_GENERATED_OBJECT_PDDL_FLAT_H_
